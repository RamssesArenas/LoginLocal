{"version":3,"sources":["assets/images/img_001.jpg","pages/Login/components/Title/Title.jsx","pages/Login/components/Label/Label.jsx","pages/Login/components/Input/Input.jsx","pages/Login/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","text","className","Label","Input","atribute","handleChange","param","id","name","placeholder","type","onChange","e","target","value","Login","useState","user","setUser","password","setPassword","passwordError","setPasswordError","isLogin","setIsLogin","hasError","setHasError","length","onClick","account","ac","JSON","stringify","localStorage","setItem","ifMatch","src","img_001","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,qC,8OCY5BC,G,YARD,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACZ,OACI,yBAAKC,UAAU,kBACVD,KCKEE,G,MARD,SAAC,GAAW,IAAVF,EAAS,EAATA,KACZ,OACI,yBAAKC,UAAU,gBACVD,KCWEG,G,MAfD,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,MACpC,OACI,yBAAKL,UAAU,YACX,2BACIM,GAAIH,EAASG,GACbC,KAAMJ,EAASI,KACfC,YAAaL,EAASK,YACtBC,KAAMN,EAASM,KACfC,SAAU,SAACC,GAAD,OAAMP,EAAaO,EAAEC,OAAOL,KAAMI,EAAEC,OAAOC,QACrDb,UAAWK,EAAQ,aAAc,oB,gBCqFlCS,EA1FD,WAAM,IAAD,EAEKC,mBAAS,IAFd,mBAETC,EAFS,KAEJC,EAFI,OAGaF,mBAAS,IAHtB,mBAGTG,EAHS,KAGAC,EAHA,OAIuBJ,oBAAS,GAJhC,mBAITK,EAJS,KAIKC,EAJL,OAKWN,oBAAS,GALpB,mBAKTO,EALS,KAKDC,EALC,OAMaR,oBAAS,GANtB,mBAMTS,EANS,KAMAC,EANA,KAQf,SAASrB,EAAaG,EAAKM,GACX,YAATN,EACCU,EAAQJ,IAELA,EAAMa,OAAS,EACdL,GAAiB,GAErBA,GAAiB,GACjBF,EAAYN,IA6BpB,OACI,yBAAKb,UAAU,kBAEX,yBAAKA,UAAU,cACbsB,GACF,yBAAKtB,UAAU,gBACX,kBAAC,EAAD,CAAOD,KAAK,WACVyB,GACE,2BAAOxB,UAAU,eAAjB,4CAIJ,kBAAC,EAAD,CAAOD,KAAK,YACZ,kBAAC,EAAD,CACII,SAAU,CACNG,GAAG,UACHC,KAAM,UACNE,KAAM,OACND,YAAY,sBAEhBJ,aAAcA,IAElB,kBAAC,EAAD,CAAOL,KAAK,kBACZ,kBAAC,EAAD,CACII,SAAU,CACNG,GAAG,iBACHC,KAAM,OACNE,KAAM,WACND,YAAY,4BAEhBJ,aAAcA,EACdC,MAAOe,IAETA,GAAgB,2BAAOpB,UAAU,cAAjB,0BAClB,6BAAK,4BAAQA,UAAU,gBAAgB2B,QAzCnD,WACI,IAAIC,EAAU,CAACZ,OAAKE,YACjBU,GApBP,SAAiBvB,GACb,GAAGA,EAAMW,KAAKU,OAAO,GAAKrB,EAAMa,SAASQ,OAAO,EAC5C,GAAkB,YAAfrB,EAAMW,MAAyC,WAAnBX,EAAMa,SAAsB,CAAC,IAEpDW,EAAK,CAACb,KADeX,EAAlBW,KACQE,SADUb,EAAZa,UAETU,EAAUE,KAAKC,UAAUF,GAC7BG,aAAaC,QAAQ,UAAUL,GAC/BL,GAAW,QAEXA,GAAW,GACXE,GAAY,QAGhBF,GAAW,GACXE,GAAY,GAOZS,CAAQN,KAsCC,eAIT,yBAAK5B,UAAU,cACX,yBAAKmC,IAAKC,IAASC,IAAI,QAAQrC,UAAU,uBC9E1CsC,MARf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,QCIcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f923f6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img_001.f034e66a.jpg\";","import React from 'react';\r\nimport './Title.css';\r\n\r\n\r\nconst Title = ({text}) => {\r\n    return(\r\n        <div className='titleContainer'>\r\n            {text}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport './Label.css'\r\n\r\n\r\nconst Label = ({text}) =>{\r\n    return(\r\n        <div className='labelContent'>\r\n            {text}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Label;","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst Input = ({atribute, handleChange, param}) =>{\r\n    return(\r\n        <div className='divinput'>\r\n            <input\r\n                id={atribute.id}\r\n                name={atribute.name}\r\n                placeholder={atribute.placeholder}\r\n                type={atribute.type}         \r\n                onChange={(e)=> handleChange(e.target.name, e.target.value)}\r\n                className={param ? 'errorStyle' :'regularStyle'}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Input;","import React,{useState} from 'react';\r\nimport './Login.css'\r\nimport Title from './components/Title/Title';\r\nimport Label from './components/Label/Label';\r\nimport Input from './components/Input/Input';\r\nimport img_001 from '../../assets/images/img_001.jpg'\r\n\r\nconst Login = () =>{\r\n\r\n    const[user,setUser]=useState('');\r\n    const[password,setPassword]=useState('');\r\n    const[passwordError,setPasswordError]=useState(false);\r\n    const[isLogin,setIsLogin]=useState(false);\r\n    const[hasError,setHasError]=useState(false);\r\n\r\n    function handleChange(name,value){\r\n        if(name === 'usuario'){\r\n            setUser(value)\r\n        }else{\r\n            if(value.length < 6){\r\n                setPasswordError(true);\r\n            }else\r\n            setPasswordError(false);\r\n            setPassword(value)\r\n        }\r\n    }\r\n\r\n    function ifMatch(param){\r\n        if(param.user.length>0 && param.password.length>0){\r\n            if(param.user === 'ramsses' && param.password === '123456'){\r\n                const {user, password} = param;\r\n                let ac = {user,password};\r\n                let account = JSON.stringify(ac);\r\n                localStorage.setItem('account',account);\r\n                setIsLogin(true);\r\n            }else{\r\n                setIsLogin(false);\r\n                setHasError(true);\r\n            }\r\n        }else{\r\n            setIsLogin(false);\r\n            setHasError(true);\r\n        }\r\n    }\r\n\r\n    function handleSummit(){\r\n        let account = {user,password}\r\n        if(account){\r\n            ifMatch(account)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='loginContainer'>\r\n\r\n            <div className='loginLeft'>\r\n            {!isLogin &&\r\n            <div className='loginContent'>\r\n                <Title text='Log in'/>\r\n                { hasError && \r\n                    <label className='label-alert'>\r\n                    Su contaseña o usario son incorrectos\r\n                    </label>\r\n                }\r\n                <Label text='Usuario'/>\r\n                <Input\r\n                    atribute={{\r\n                        id:'usuario',\r\n                        name: 'usuario',\r\n                        type: 'text',\r\n                        placeholder:'Ingrese su usuario'\r\n                    }}\r\n                    handleChange={handleChange}\r\n                />\r\n                <Label text='Contraseña'/>\r\n                <Input\r\n                    atribute={{\r\n                        id:'constraseña',\r\n                        name: 'pass',\r\n                        type: 'password',\r\n                        placeholder:'Ingrese su contraseña'\r\n                    }}\r\n                    handleChange={handleChange}\r\n                    param={passwordError}\r\n                />\r\n                { passwordError &&<label className='labelError'>Contraseña invalida</label>}\r\n                <div><button className='botonIngresar' onClick={handleSummit}>Ingresar</button></div>\r\n            </div>\r\n            }\r\n            </div>\r\n            <div className='loginRight'>\r\n                <img src={img_001} alt=\"Loish\" className=\"BackgroundImage\" />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\nexport default Login;","import React from 'react';\n\nimport './App.css';\nimport Login from './pages/Login/Login'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}